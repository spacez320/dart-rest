{"name":"SplayTreeSet","qualifiedName":"dart-collection.SplayTreeSet","comment":"<p>A <a>dart-core.Set</a> of objects that can be ordered relative to each other.</p>\n<p>The set is based on a self-balancing binary tree. It allows most operations\nin amortized logarithmic time.</p>\n<p>Elements of the set are compared using the <code>compare</code> function passed in\nthe constructor. If that is omitted, the objects are assumed to be\n<a>dart-core.Comparable</a>, and are compared using their <a>dart-core.Comparable.compareTo</a>\nmethod. Non-comparable objects (including <code>null</code>) will not work as an element\nin that case.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"dart-collection.SplayTreeSet.first","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.first","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-collection.SplayTreeSet.isEmpty","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.isEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-collection.SplayTreeSet.isNotEmpty","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.isNotEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"dart-collection.SplayTreeSet.iterator","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.iterator","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-collection.SplayTreeSet.last","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.last","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-collection.SplayTreeSet.length","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.length","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-collection.SplayTreeSet.single","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.single","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-collection.SplayTreeSet.SplayTreeSet-","comment":"<p>Create a new <a>dart-collection.SplayTreeSet</a> with the given compare function.</p>\n<p>If the <a>dart-collection.SplayTreeSet.SplayTreeSet-.compare</a> function is omitted, it defaults to <a>dart-core.Comparable.compare</a>,\nand the elements must be comparable.</p>\n<p>A provided <code>compare</code> function may not work on all objects. It may not even\nwork on all <code>E</code> instances.</p>\n<p>For operations that add elements to the set, the user is supposed to not\npass in objects that doesn't work with the compare function.</p>\n<p>The methods <a>dart-collection.SplayTreeSet.contains</a>, <a>dart-collection.SplayTreeSet.remove</a>, <a>dart-collection.SplayTreeSet.lookup</a>, <a>dart-collection.SplayTreeSet.removeAll</a> or <a>dart-collection.SplayTreeSet.retainAll</a>\nare typed to accept any object(s), and the <a>dart-collection.SplayTreeSet.SplayTreeSet-.isValidKey</a> test can used to\nfilter those objects before handing them to the <code>compare</code> function.</p>\n<p>If <a>dart-collection.SplayTreeSet.SplayTreeSet-.isValidKey</a> is provided, only values satisfying <code>isValidKey(other)</code>\nare compared using the <code>compare</code> method in the methods mentioned above.\nIf the <code>isValidKey</code> function returns false for an object, it is assumed to\nnot be in the set.</p>\n<p>If omitted, the <code>isValidKey</code> function defaults to checking against the\ntype parameter: <code>other is E</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"compare":{"name":"compare","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"key1":{"name":"key1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"value":null,"annotations":[]},"key2":{"name":"key2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"value":null,"annotations":[]}}}},"isValidKey":{"name":"isValidKey","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"potentialKey":{"name":"potentialKey","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"dart-collection.SplayTreeSet.add","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.add","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"dart-collection.SplayTreeSet.addAll","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.addAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-collection.SplayTreeSet.clear","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.clear","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-collection.SplayTreeSet.contains","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.contains","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"dart-collection.SplayTreeSet.difference","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.difference","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"dart-collection.SplayTreeSet.intersection","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.intersection","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"dart-collection.SplayTreeSet.lookup","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.lookup","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-collection.SplayTreeSet.remove","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.remove","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"dart-collection.SplayTreeSet.removeAll","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.removeAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainAll":{"name":"retainAll","qualifiedName":"dart-collection.SplayTreeSet.retainAll","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.retainAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-collection.SplayTreeSet.toSet","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.toSet","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-collection.SplayTreeSet.toString","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"union":{"name":"union","qualifiedName":"dart-collection.SplayTreeSet.union","comment":"","commentFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.union","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SplayTreeSet.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"dart-collection.SplayTreeSet.first","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-collection.SplayTreeSet.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-collection.SplayTreeSet.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-collection.SplayTreeSet.isEmpty","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-collection.SplayTreeSet.isNotEmpty","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.isNotEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"dart-collection.SplayTreeSet.iterator","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.iterator","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-collection.SplayTreeSet.last","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-collection.SplayTreeSet.length","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-collection.SplayTreeSet.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-collection.SplayTreeSet.single","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-collection.SplayTreeSet.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-collection.SplayTreeSet.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-collection.SplayTreeSet.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"dart-collection.SplayTreeSet.add","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"dart-collection.SplayTreeSet.addAll","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.addAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"dart-collection.SplayTreeSet.any","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-collection.SplayTreeSet.clear","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.clear","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-collection.SplayTreeSet.contains","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.contains","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsAll":{"name":"containsAll","qualifiedName":"dart-collection.SplayTreeSet.containsAll","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.containsAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"dart-collection.SplayTreeSet.difference","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.difference","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-collection.SplayTreeSet.elementAt","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-collection.SplayTreeSet.every","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-collection.SplayTreeSet.expand","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-collection.SplayTreeSet.firstWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-collection.SplayTreeSet.fold","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-collection.SplayTreeSet.forEach","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"dart-collection.SplayTreeSet.intersection","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.intersection","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-collection.SplayTreeSet.join","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-collection.SplayTreeSet.lastWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"dart-collection.SplayTreeSet.lookup","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.lookup","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-collection.SplayTreeSet.map","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-collection.SplayTreeSet.noSuchMethod","comment":"<p><a>dart-collection.SplayTreeSet.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-collection.SplayTreeSet.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-collection.SplayTreeSet.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-collection.SplayTreeSet.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-collection.SplayTreeSet.reduce","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-collection.SplayTreeSet.remove","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"dart-collection.SplayTreeSet.removeAll","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.removeAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"dart-collection.SplayTreeSet.removeWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.removeWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"retainAll":{"name":"retainAll","qualifiedName":"dart-collection.SplayTreeSet.retainAll","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.retainAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"dart-collection.SplayTreeSet.retainWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.retainWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-collection.SplayTreeSet.singleWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-collection.SplayTreeSet.skip","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-collection.SplayTreeSet.skipWhile","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-collection.SplayTreeSet.take","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-collection.SplayTreeSet.takeWhile","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-collection.SplayTreeSet.toList","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-collection.SplayTreeSet.toSet","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.toSet","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-collection.SplayTreeSet.toString","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"union":{"name":"union","qualifiedName":"dart-collection.SplayTreeSet.union","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.union","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-collection.SplayTreeSet.where","comment":"","commentFrom":"","inheritedFrom":"dart-collection._SplayTree+IterableMixin+SetMixin.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{"E":{"name":"E","type":"dart.core.Object"}}}