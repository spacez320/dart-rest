{"libraries":[{"packageName":"","name":"dart-async","qualifiedName":"dart-async","preview":"<p>Support for asynchronous programming,\nwith classes such as Future and Stream.</p>","version":"1.5.2"},{"packageName":"","name":"dart-collection","qualifiedName":"dart-collection","preview":"<p>Classes and utilities that supplement the collection support in dart:core.</p>","version":"1.5.2"},{"packageName":"","name":"dart-convert","qualifiedName":"dart-convert","preview":"<p>Encoders and decoders for converting between different data representations,\nincluding JSON and UTF-8.</p>","version":"1.5.2"},{"packageName":"","name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","version":"1.5.2"},{"packageName":"","name":"dart-dom-html","qualifiedName":"dart-dom-html","preview":"<p>HTML elements and other resources for web-based applications that need to\ninteract with the browser and the DOM (Document Object Model).</p>","version":"1.5.2"},{"packageName":"","name":"dart-dom-indexed_db","qualifiedName":"dart-dom-indexed_db","preview":"<p>A client-side key-value store with support for indexes.</p>","version":"1.5.2"},{"packageName":"","name":"dart-dom-svg","qualifiedName":"dart-dom-svg","preview":"<p>Scalable Vector Graphics:\nTwo-dimensional vector graphics with support for events and animation.</p>","version":"1.5.2"},{"packageName":"","name":"dart-dom-web_audio","qualifiedName":"dart-dom-web_audio","preview":"<p>High-fidelity audio programming in the browser.</p>","version":"1.5.2"},{"packageName":"","name":"dart-dom-web_gl","qualifiedName":"dart-dom-web_gl","preview":"<p>3D programming in the browser.</p>","version":"1.5.2"},{"packageName":"","name":"dart-dom-web_sql","qualifiedName":"dart-dom-web_sql","preview":"<p>An API for storing data in the browser that can be queried with SQL.</p>","version":"1.5.2"},{"packageName":"","name":"dart-io","qualifiedName":"dart-io","preview":"<p>File, socket, HTTP, and other I/O support for server applications.</p>","version":"1.5.2"},{"packageName":"","name":"dart-isolate","qualifiedName":"dart-isolate","preview":"<p>Concurrent programming using <em>isolates</em>:\nindependent workers that are similar to threads\nbut don't share memory,\ncommunicating only via messages.</p>","version":"1.5.2"},{"packageName":"","name":"dart-js","qualifiedName":"dart-js","preview":"<p>Support for interoperating with JavaScript.</p>","version":"1.5.2"},{"packageName":"","name":"dart-math","qualifiedName":"dart-math","preview":"<p>Mathematical constants and functions, plus a random number generator.</p>","version":"1.5.2"},{"packageName":"","name":"dart-mirrors","qualifiedName":"dart-mirrors","preview":"<p>Basic reflection in Dart,\nwith support for introspection and dynamic evaluation.</p>","version":"1.5.2"},{"packageName":"","name":"dart-profiler","qualifiedName":"dart-profiler","version":"1.5.2"},{"packageName":"","name":"dart-typed_data","qualifiedName":"dart-typed_data","preview":"<p>Specialized integers and floating point numbers,\nwith SIMD support and efficient lists.</p>","version":"1.5.2"},{"packageName":"rest","name":"http_rest","qualifiedName":"rest/http_rest","packageIntro":"<h1>rest</h1>\n<p>This Dart library provides two things:</p><ul><li>an HTTP REST server implementation</li><li>extensible, generic REST implementation for building REST-ful applications</li></ul>\n<h2>Installing</h2>\n<p>Add \"rest\" as a dependency in your <strong>pubspec.yaml</strong> file, and run <code>pub\ninstall</code>.</p>\n<p>More information: https://www.dartlang.org/tools/pub/get-started.html#installing-packages</p>\n<h2>Usage</h2>\n<p>Within <code>dart:io HttpServer</code>, instantiate and resolve REST-ful requests by\ncreating an <code>HttpRest</code> handler. The <code>HttpRest</code> handler itself is instantiated\nby a route map that you generate and provide, with endpoints that you generate\nand provide.</p>\n<p>Generally, this involves four steps.</p><ul><li>Firstly; importing the library.</li></ul>\n<pre class=\"dart\"><code>        import 'rest:rest/http_rest.dart' show\n          HttpRest, HttpRestRoute, HttpRestResponse, RouteNotFoundException;\n</code></pre><ul><li>Secondly; building the routes.</li></ul>\n<pre class=\"dart\"><code>      // keys are regular expressions\n\n      var routes = {\n        r\"^foo\": {\n          r\"^bar$\": new HttpRestRoute({\n            'GET': fooBar   // a function called fooBar\n          }),\n          r\"^bat$\": new HttpRestRoute({\n            'POST': fooBat  // a function called fooBat\n          })\n        }\n      }\n\n      HttpRest rest = new HttpRest(routes);\n</code></pre><ul><li>Thirdly; creating the server and adding the resolve action.</li></ul>\n<pre class=\"dart\"><code>      HttpServer.bind('0.0.0.0', 8000),then((server) {\n        server.listen((HttpRequest request)\n          try {\n\n            // HttpRest will write and close the response to the request\n            // if it finds a useable endpoint\n\n            rest.resolve(request);\n\n          } on RouteNotFoundException {\n\n            // rest.resolve through an exception because it couldn't find\n            // and endpoint with the url\n\n            request.response.close();\n\n          }\n        });\n      });\n</code></pre><ul><li>Fourthly; defining your end-point functions.</li></ul>\n<pre class=\"dart\"><code>      fooBar() {\n        return new HttpRestResponse().build(200, 'fooBar!\\n');\n      }\n\n      fooBat() {\n        return new HttpRestResponse().build(502, 'fooBat!\\n');\n      }\n</code></pre>\n<p>See <code>example/example-rest.dart</code> for a more in-depth, working example.</p>\n<h3>On Endpoint Functions</h3>\n<p>Notice that the examples above are building <code>HttpRestResponse</code> objects.\nYour endpoint functions can;</p><ul><li>also do this,</li></ul>\n<pre class=\"dart\"><code>        myEndpoint() { return new HttpRestResponse().build(\n          200, \"stuff and things\\n\"); }\n</code></pre><ul><li>\n<p>return a <code>Map</code> with associated fields that will automatically build an\n<code>HttpRestResponse</code> object for you,</p></li></ul>\n<pre class=\"dart\"><code>        myEndPoint() { return { 'code': 200, 'body': \"stuff and things\\n\" }; }\n</code></pre><ul><li>\n<p>or return anything else, in which case the return object's <code>.toString()</code>\nmethod is used to generate the body and the response code is set to <code>200</code></p></li></ul>\n<pre class=\"dart\"><code>        myEndPoint() { return \"stuff and things\\n\"; }\n</code></pre>\n<h2>Extending REST</h2>\n<p>Extensible classes exist to create your own REST interfaces, HTTP based or\notherwise. Doing so is a matter of defining what verbs you want to use.</p>\n<pre class=\"dart\"><code>    import \"package:rest/rest.dart\" show Rest, RestRoute;\n\n    class YodaRest implements Rest {\n      // ...\n    }\n\n    class YodaRestRoute extends RestRoute {\n\n      Map&lt;String,Verb&gt; verbs = {\n        'DO':     null,\n        'DO_NOT': null,\n        'TRY':    throw new Exception('There is no try!')\n      }\n\n      // ...\n    }\n</code></pre>\n<p>And etcetera.</p>\n<h2>Development</h2>\n<p>This project is currently functional, but in need of heavy development.</p>\n<p>https://github.com/spacez320/dart-rest</p>\n<p>If you would like to see continued development on this library, have\nsuggestions, or would like to contribute; please feel free to file pull\nrequests or contact me directly (through Github).</p>\n<h2>Documentation</h2>\n<p>API docs are generated and available on pub.dartlang.org.</p>\n<p>http://pub.dartlang.org/packages/rest</p>\n<h2>Copyright/Licensing</h2>\n<p>See LICENSE</p>","version":"rest-0.1.6-alpha"},{"packageName":"rest","name":"rest","qualifiedName":"rest/rest","packageIntro":"<h1>rest</h1>\n<p>This Dart library provides two things:</p><ul><li>an HTTP REST server implementation</li><li>extensible, generic REST implementation for building REST-ful applications</li></ul>\n<h2>Installing</h2>\n<p>Add \"rest\" as a dependency in your <strong>pubspec.yaml</strong> file, and run <code>pub\ninstall</code>.</p>\n<p>More information: https://www.dartlang.org/tools/pub/get-started.html#installing-packages</p>\n<h2>Usage</h2>\n<p>Within <code>dart:io HttpServer</code>, instantiate and resolve REST-ful requests by\ncreating an <code>HttpRest</code> handler. The <code>HttpRest</code> handler itself is instantiated\nby a route map that you generate and provide, with endpoints that you generate\nand provide.</p>\n<p>Generally, this involves four steps.</p><ul><li>Firstly; importing the library.</li></ul>\n<pre class=\"dart\"><code>        import 'rest:rest/http_rest.dart' show\n          HttpRest, HttpRestRoute, HttpRestResponse, RouteNotFoundException;\n</code></pre><ul><li>Secondly; building the routes.</li></ul>\n<pre class=\"dart\"><code>      // keys are regular expressions\n\n      var routes = {\n        r\"^foo\": {\n          r\"^bar$\": new HttpRestRoute({\n            'GET': fooBar   // a function called fooBar\n          }),\n          r\"^bat$\": new HttpRestRoute({\n            'POST': fooBat  // a function called fooBat\n          })\n        }\n      }\n\n      HttpRest rest = new HttpRest(routes);\n</code></pre><ul><li>Thirdly; creating the server and adding the resolve action.</li></ul>\n<pre class=\"dart\"><code>      HttpServer.bind('0.0.0.0', 8000),then((server) {\n        server.listen((HttpRequest request)\n          try {\n\n            // HttpRest will write and close the response to the request\n            // if it finds a useable endpoint\n\n            rest.resolve(request);\n\n          } on RouteNotFoundException {\n\n            // rest.resolve through an exception because it couldn't find\n            // and endpoint with the url\n\n            request.response.close();\n\n          }\n        });\n      });\n</code></pre><ul><li>Fourthly; defining your end-point functions.</li></ul>\n<pre class=\"dart\"><code>      fooBar() {\n        return new HttpRestResponse().build(200, 'fooBar!\\n');\n      }\n\n      fooBat() {\n        return new HttpRestResponse().build(502, 'fooBat!\\n');\n      }\n</code></pre>\n<p>See <code>example/example-rest.dart</code> for a more in-depth, working example.</p>\n<h3>On Endpoint Functions</h3>\n<p>Notice that the examples above are building <code>HttpRestResponse</code> objects.\nYour endpoint functions can;</p><ul><li>also do this,</li></ul>\n<pre class=\"dart\"><code>        myEndpoint() { return new HttpRestResponse().build(\n          200, \"stuff and things\\n\"); }\n</code></pre><ul><li>\n<p>return a <code>Map</code> with associated fields that will automatically build an\n<code>HttpRestResponse</code> object for you,</p></li></ul>\n<pre class=\"dart\"><code>        myEndPoint() { return { 'code': 200, 'body': \"stuff and things\\n\" }; }\n</code></pre><ul><li>\n<p>or return anything else, in which case the return object's <code>.toString()</code>\nmethod is used to generate the body and the response code is set to <code>200</code></p></li></ul>\n<pre class=\"dart\"><code>        myEndPoint() { return \"stuff and things\\n\"; }\n</code></pre>\n<h2>Extending REST</h2>\n<p>Extensible classes exist to create your own REST interfaces, HTTP based or\notherwise. Doing so is a matter of defining what verbs you want to use.</p>\n<pre class=\"dart\"><code>    import \"package:rest/rest.dart\" show Rest, RestRoute;\n\n    class YodaRest implements Rest {\n      // ...\n    }\n\n    class YodaRestRoute extends RestRoute {\n\n      Map&lt;String,Verb&gt; verbs = {\n        'DO':     null,\n        'DO_NOT': null,\n        'TRY':    throw new Exception('There is no try!')\n      }\n\n      // ...\n    }\n</code></pre>\n<p>And etcetera.</p>\n<h2>Development</h2>\n<p>This project is currently functional, but in need of heavy development.</p>\n<p>https://github.com/spacez320/dart-rest</p>\n<p>If you would like to see continued development on this library, have\nsuggestions, or would like to contribute; please feel free to file pull\nrequests or contact me directly (through Github).</p>\n<h2>Documentation</h2>\n<p>API docs are generated and available on pub.dartlang.org.</p>\n<p>http://pub.dartlang.org/packages/rest</p>\n<h2>Copyright/Licensing</h2>\n<p>See LICENSE</p>","version":"rest-0.1.6-alpha"}],"introduction":"<p>Welcome to the Dart API reference documentation,\ncovering the official Dart API libraries.\nSome of the most fundamental Dart libraries include:</p><ul><li>\n<p><a href=\"#dart:core\">dart:core</a>:\n  Core functionality such as strings, numbers, collections, errors,\n  dates, and URIs.</p></li><li>\n<p><a href=\"#dart:html\">dart:html</a>:\n  DOM manipulation for web apps.</p></li><li>\n<p><a href=\"#dart:io\">dart:io</a>:\n  I/O for command-line apps.</p></li></ul>\n<p>Except for dart:core, you must import a library before you can use it.\nHere's an example of importing dart:html, dart:math, and a\nthird popular library called\n<a href=\"http://www.dartlang.org/polymer-dart/\">polymer.dart</a>:</p>\n<pre><code>import 'dart:html';\nimport 'dart:math';\nimport 'package:polymer/polymer.dart';\n</code></pre>\n<p>Polymer.dart is an example of a library that isn't\nincluded in the Dart download,\nbut is easy to get and update using the <em>pub package manager</em>.\nFor information on finding, using, and publishing libraries (and more)\nwith pub, see\n<a href=\"http://pub.dartlang.org\">pub.dartlang.org</a>.</p>\n<p>The main site for learning and using Dart is\n<a href=\"http://www.dartlang.org\">www.dartlang.org</a>.\nCheck out these pages:</p><ul><li><a href=\"http://www.dartlang.org\">Dart homepage</a></li><li><a href=\"http://www.dartlang.org/docs/tutorials/\">Tutorials</a></li><li><a href=\"http://www.dartlang.org/docs/\">Programmer's Guide</a></li><li><a href=\"http://www.dartlang.org/samples/\">Samples</a></li><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">A Tour of the Dart Libraries</a></li></ul>\n<p>This API reference is automatically generated from the source code in the\n<a href=\"https://code.google.com/p/dart/\">Dart project</a>.\nIf you'd like to contribute to this documentation, see\n<a href=\"https://code.google.com/p/dart/wiki/Contributing\">Contributing</a>\nand\n<a href=\"https://code.google.com/p/dart/wiki/WritingApiDocumentation\">Writing API Documentation</a>.</p>","filetype":"json","sdkVersion":"1.5.2","start-page":"rest"}