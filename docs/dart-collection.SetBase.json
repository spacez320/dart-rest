{"name":"SetBase","qualifiedName":"dart-collection.SetBase","comment":"<p>Base implementation of <a>dart-core.Set</a>.</p>\n<p>This class provides a base implementation of a <code>Set</code> that depends only\non the abstract members: <a>dart-collection.SetMixin.add</a>, <a>dart-collection.SetMixin.contains</a>, <a>dart-collection.SetMixin.lookup</a>, <a>dart-collection.SetMixin.remove</a>,\n<a>dart-collection.SetMixin.iterator</a>, <a>dart-collection.SetMixin.length</a> and <a>dart-collection.SetMixin.toSet</a>.</p>\n<p>Some of the methods assume that <code>toSet</code> creates a modifiable set.\nIf using this base class for an unmodifiable set,\nwhere <code>toSet</code> should return an unmodifiable set,\nit's necessary to reimplement\n<a>dart-collection.SetMixin.retainAll</a>, <a>dart-collection.SetMixin.union</a>, <a>dart-collection.SetMixin.intersection</a> and <a>dart-collection.SetMixin.difference</a>.</p>\n<p>Implementations of <code>Set</code> using this base should consider also implementing\n<code>clear</code> in constant time. The default implementation works by removing every\nelement.</p>","isAbstract":true,"superclass":"dart-collection.SetMixin","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"setToString":{"name":"setToString","qualifiedName":"dart-collection.SetBase.setToString","comment":"<p>Convert a <code>Set</code> to a string as <code>{each, element, as, string}</code>.</p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <a>dart-collection.SetBase.setToString.set</a> to a string again.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"set":{"name":"set","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"dart-collection.SetBase.first","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-collection.SetBase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-collection.SetBase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"dart-collection.SetBase.isEmpty","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"dart-collection.SetBase.isNotEmpty","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.isNotEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"dart-collection.SetBase.iterator","comment":"<p>Provides an iterator that iterates over the elements of this set.</p>\n<p>The order of iteration is defined by the individual <code>Set</code> implementation,\nbut must be consistent between changes to the set.</p>","commentFrom":"dart-core.Set.iterator","inheritedFrom":"dart-collection.SetMixin.iterator","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"dart-collection.SetBase.last","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"dart-collection.SetBase.length","comment":"<p>Returns the number of elements in the iterable.</p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.</p>","commentFrom":"dart-core.EfficientLength.length","inheritedFrom":"dart-collection.SetMixin.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-collection.SetBase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"dart-collection.SetBase.single","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-collection.SetBase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-collection.SetBase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-collection.SetBase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"dart-collection.SetBase.add","comment":"<p>Adds value into the set. Returns <code>true</code> if value was added to the set.</p>\n<p>If value already exists, the set is not changed and <code>false</code> is returned.</p>","commentFrom":"dart-core.Set.add","inheritedFrom":"dart-collection.SetMixin.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"dart-collection.SetBase.addAll","comment":"<p>Adds all of <a>dart-collection.SetBase.addAll.elements</a> to this Set.</p>\n<p>Equivalent to adding each element in <a>dart-collection.SetBase.addAll.elements</a> using <a>dart-collection.SetBase.add</a>,\nbut some collections may be able to optimize it.</p>","commentFrom":"dart-core.Set.addAll","inheritedFrom":"dart-collection.SetMixin.addAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"dart-collection.SetBase.any","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"dart-collection.SetBase.clear","comment":"<p>Removes all elements in the set.</p>","commentFrom":"dart-core.Set.clear","inheritedFrom":"dart-collection.SetMixin.clear","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"dart-collection.SetBase.contains","comment":"<p>Returns true if value is in the set.</p>","commentFrom":"dart-core.Set.contains","inheritedFrom":"dart-collection.SetMixin.contains","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"containsAll":{"name":"containsAll","qualifiedName":"dart-collection.SetBase.containsAll","comment":"<p>Returns whether this Set contains all the elements of <a>dart-collection.SetBase.containsAll.other</a>.</p>","commentFrom":"dart-core.Set.containsAll","inheritedFrom":"dart-collection.SetMixin.containsAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"dart-collection.SetBase.difference","comment":"<p>Returns a new set with the the elements of this that are not in <a>dart-collection.SetBase.difference.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> that\nare not elements of <a>dart-collection.SetBase.difference.other</a> according to <code>other.contains</code>.</p>","commentFrom":"dart-core.Set.difference","inheritedFrom":"dart-collection.SetMixin.difference","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"dart-collection.SetBase.elementAt","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"dart-collection.SetBase.every","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"dart-collection.SetBase.expand","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"dart-collection.SetBase.firstWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"dart-collection.SetBase.fold","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"dart-collection.SetBase.forEach","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"dart-collection.SetBase.intersection","comment":"<p>Returns a new set which is the intersection between this set and <a>dart-collection.SetBase.intersection.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> that\nare also elements of <a>dart-collection.SetBase.intersection.other</a> according to <code>other.contains</code>.</p>","commentFrom":"dart-core.Set.intersection","inheritedFrom":"dart-collection.SetMixin.intersection","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"dart-collection.SetBase.join","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"dart-collection.SetBase.lastWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"dart-collection.SetBase.lookup","comment":"<p>If an object equal to object is in the set, return it.</p>\n<p>Checks if there is an object in the set that is equal to object.\nIf so, that object is returned, otherwise returns null.</p>","commentFrom":"dart-core.Set.lookup","inheritedFrom":"dart-collection.SetMixin.lookup","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"dart-collection.SetBase.map","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-collection.SetBase.noSuchMethod","comment":"<p><a>dart-collection.SetBase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-collection.SetBase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-collection.SetBase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-collection.SetBase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"dart-collection.SetBase.reduce","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"dart-collection.SetBase.remove","comment":"<p>Removes value from the set. Returns true if value was\nin the set. Returns false otherwise. The method has no effect\nif value value was not in the set.</p>","commentFrom":"dart-core.Set.remove","inheritedFrom":"dart-collection.SetMixin.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"dart-collection.SetBase.removeAll","comment":"<p>Removes each element of <a>dart-collection.SetBase.removeAll.elements</a> from this set.</p>","commentFrom":"dart-core.Set.removeAll","inheritedFrom":"dart-collection.SetMixin.removeAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"dart-collection.SetBase.removeWhere","comment":"<p>Removes all elements of this set that satisfy <a>dart-collection.SetBase.removeWhere.test</a>.</p>","commentFrom":"dart-core.Set.removeWhere","inheritedFrom":"dart-collection.SetMixin.removeWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"retainAll":{"name":"retainAll","qualifiedName":"dart-collection.SetBase.retainAll","comment":"<p>Removes all elements of this set that are not elements in <a>dart-collection.SetBase.retainAll.elements</a>.</p>\n<p>Checks for each element of <a>dart-collection.SetBase.retainAll.elements</a> whether there is an element in this\nset that is equal to it (according to <code>this.contains</code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements</code> are removed.</p>","commentFrom":"dart-core.Set.retainAll","inheritedFrom":"dart-collection.SetMixin.retainAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elements":{"name":"elements","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"dart-collection.SetBase.retainWhere","comment":"<p>Removes all elements of this set that fail to satisfy <a>dart-collection.SetBase.retainWhere.test</a>.</p>","commentFrom":"dart-core.Set.retainWhere","inheritedFrom":"dart-collection.SetMixin.retainWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"dart-collection.SetBase.singleWhere","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.SetBase.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"dart-collection.SetBase.skip","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"dart-collection.SetBase.skipWhile","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"take":{"name":"take","qualifiedName":"dart-collection.SetBase.take","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"dart-collection.SetBase.takeWhile","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"dart-collection.SetBase.toList","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"dart-collection.SetBase.toSet","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.toSet","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-collection.SetBase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-collection.SetMixin.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"union":{"name":"union","qualifiedName":"dart-collection.SetBase.union","comment":"<p>Returns a new set which contains all the elements of this set and <a>dart-collection.SetBase.union.other</a>.</p>\n<p>That is, the returned set contains all the elements of this <a>dart-core.Set</a> and\nall the elements of <a>dart-collection.SetBase.union.other</a>.</p>","commentFrom":"dart-core.Set.union","inheritedFrom":"dart-collection.SetMixin.union","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-collection.SetMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"dart-collection.SetBase.where","comment":"","commentFrom":"","inheritedFrom":"dart-collection.SetMixin.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-collection.SetBase.E","inner":[]}]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-collection.SetMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{"E":{"name":"E","type":"dart.core.Object"}}}