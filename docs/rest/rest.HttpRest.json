{"name":"HttpRest","qualifiedName":"rest/rest.HttpRest","comment":"<p>An HTTP REST server.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["rest/rest.Rest"],"subclass":[],"variables":{"rest_router":{"name":"rest_router","qualifiedName":"rest/rest.HttpRest.rest_router","comment":"<p>the routing engine</p>","final":false,"static":false,"constant":false,"type":[{"outer":"rest/rest.Router","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"rest/rest.HttpRest.HttpRest-","comment":"<p>Constructs an HttpRest object from provided routes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"routes":{"name":"routes","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"CREATED":{"name":"CREATED","qualifiedName":"rest/rest.HttpRest.CREATED","comment":"<p>Returns HTTP 201 Created</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"METHOD_NOT_ALLOWED":{"name":"METHOD_NOT_ALLOWED","qualifiedName":"rest/rest.HttpRest.METHOD_NOT_ALLOWED","comment":"<p>Returns HTTP 405 Method Not Allowed</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"NOT_FOUND":{"name":"NOT_FOUND","qualifiedName":"rest/rest.HttpRest.NOT_FOUND","comment":"<p>Returns HTTP 404 Not Found</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"NOT_IMPLEMENTED":{"name":"NOT_IMPLEMENTED","qualifiedName":"rest/rest.HttpRest.NOT_IMPLEMENTED","comment":"<p>Returns HTTP 501 Not Implemented</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"NO_CONTENT":{"name":"NO_CONTENT","qualifiedName":"rest/rest.HttpRest.NO_CONTENT","comment":"<p>Returns HTTP 204 No Content</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"OK":{"name":"OK","qualifiedName":"rest/rest.HttpRest.OK","comment":"<p>Returns HTTP 200 OK</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"UNAUTHORIZED":{"name":"UNAUTHORIZED","qualifiedName":"rest/rest.HttpRest.UNAUTHORIZED","comment":"<p>Returns HTTP 401 Unauthorized</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{},"annotations":[]},"resolve":{"name":"resolve","qualifiedName":"rest/rest.HttpRest.resolve","comment":"<p>Resolves an HTTP Rest Request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"rest/rest.HttpRestResponse","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"rest/rest.HttpRest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>rest/rest.HttpRest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"rest/rest.HttpRest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"rest/rest.HttpRest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>rest/rest.HttpRest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>rest/rest.HttpRest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"rest/rest.HttpRest.noSuchMethod","comment":"<p><a>rest/rest.HttpRest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>rest/rest.HttpRest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>rest/rest.HttpRest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>rest/rest.HttpRest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resolve":{"name":"resolve","qualifiedName":"rest/rest.HttpRest.resolve","comment":"<p>Resolves a REST request.</p>","commentFrom":"","inheritedFrom":"rest.Rest.resolve","static":false,"abstract":true,"constant":false,"return":[{"outer":"rest/rest.RestResponse","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"rest/rest.HttpRest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}